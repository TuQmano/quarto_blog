{
  "hash": "16885cbcf9b3428e0f237c2908b2275f",
  "result": {
    "markdown": "---\ntitle: diag`R`amas\nauthor: TuQmano\ndate: '2019-04-18'\nslug: diagramas\ncategories: [Viz]\n---\n\n\nAyer participé en el segundo **#MiércolesDeDatos**, que replica el desafío semanal [#TidyTuesday](https://twitter.com/hashtag/tidytuesday) de su hermano anglófono por iniciativa de @[R4DS_es](https://twitter.com/R4DS_es/status/1115231541909762048), quienes colaboran para hacer accesible *la biblia* de la comunidad datera de `R` para la comunidad hispanoparlante. \n\nEl proyecto de ayer consitía en hacer un análisis de datos y visualización con información de los libros de _Game of Thrones_. Esto fue lo que [compartí](https://twitter.com/TuQmano/status/1118649665455644673)\n\nAproveché los datos de este #MiércolesDeDatos para probar una de las _features_ que incluye `ggforce` (el _acelerador_ de `ggplot` creado por [Thomas Lin Pedersen](https://ggforce.data-imaginist.com/)). \n\n**Qué tipo de gráfico es éste?** \n\nEl mismo Pedersen (cientista de datos en `RStudio` - @[thomasp85](https://twitter.com/thomasp85) en Twitter) señala que hay una familia de estas figuras con nombres distintos. Y destaca cuales son para él las diferencias y particularidades de cada una de esas nomenclaturas (*Sankey*, *Alluvial* y *Parrallel Sets*). \n\nEn sus palabras (traducidas) sería algo así: \n\n> Hay un poco de confusión en la nomenclatura con esto. Insistiré en que los diagramas de Sankey son específicamente para flujos (y, a menudo, emplean una posición más suelta de los ejes) y los diagramas aluviales son para seguir los cambios temporales, pero todos podemos ser amigos, no importa cómo se llame.\n\n---\n\n\nYa hace algún tiempo empecé a jugar con gráficos de este tipo. Se me ocurren rápido algunos ejemplos: \n\n\n### SANKEY \nEn primer lugar unos gráficos que fueron producidos con _SankeyMatic_ (una recomendación de [Crst_C](https://twitter.com/Crst_C/)). \n\n<img src=\"https://cdn-images-1.medium.com/max/800/1*cBOjBltyQQhMC2tYUyE2AQ.png\" width=\"700\" height=\"700\" />\n\n\n(El ejercicio buscaba ilustrar el origen partidario de los votos de una alianza. El análisis completo [acá](https://medium.com/pol%C3%ADtica-elecciones/corrientes-algunos-polvos-que-no-ser%C3%A1n-lodos-8273184a828e)).\n\n\n\n### `ggalluvial`\n\nEn segundo lugar intenté rehacer un gráfico hecho con [_SankeyMatic_](http://sankeymatic.com/) desde `R`, procurando reproducibilidad. [Acá el original](https://twitter.com/TuQmano/status/1019543981406019586), abajo la versión reproducible:\n\n<img src=\"https://github.com/TuQmano/Electoral_Forensics/raw/master/Aportes_PBA_2017/Plot3.png\" width=\"900\" height=\"700\" />\n\n\nEl ejericio buscaba ilustrar como se distribuyeron las fuentes de finanicmiento privada de partidos políticos en la elección nacional de 2017 en la Provincia de Buenos Aires. El análisis completo [acá](https://github.com/TuQmano/Electoral_Forensics/tree/master/Aportes_PBA_2017).\n\n\n### _Parrallel Sets_\n\nAyer completé el trio con el ejemplo de _GoT_ usando el `geom_parrallel_sets` de `ggforce`. Respecto de esta variante Pedersen agrega que: \n\n> El problema principal es que los datos para los gráficos de conjuntos paralelos generalmente no se representan muy bien en el formato tidy esperado por ggplot2, por lo que ggforce proporciona una función para obtener con ese formato.\n\nEsta función amiga es `gather_set_data(a:b)`, la cual selecciona las variables que queremos incluir en nuestros ejes. Genera nuevas variables llamadas `id`, `x`, `y`. Junto con `value` - el conteo de personajes por cada uno de los grupos que definimos- y `Lealtad`, que es la variable que usamos para definir los colores de las casas de _GoT_, tenemos toda la información.  \n\nEl código completo y el plot son los siguiente:  \n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggforce)\nlibrary(ggthemes)\n\n#GoT PLOT - #MiércolesDeDatos\nreadr::read_csv(\"https://raw.githubusercontent.com/cienciadedatos/datos-de-miercoles/master/datos/2019/2019-04-17/personajes_libro.csv\") %>%  #CARGAMOS DATA SET\n  select(2:4) %>%  # SELECCIONAMOS COLUMNAS CON DATOS QUE VAMOS A USAR\n  group_by(lealtad, genero, noble) %>%   # AGRUPAMOS POR TRES VARIABLES\n  mutate(value = n()) %>%  # CONTAMOS CUANTOS PERSONAJES HAY POR GRUPO\n  ungroup() %>% \n  mutate(noble = ifelse(noble == 1, \"Noble\", \"Plebeyo\"), \n         genero = ifelse(genero == \"masculino\", \"H\", \"M\")) %>% \n  rename('Genero' = 'genero', \n         'Status' = 'noble', \n         'Lealtad' = 'lealtad') %>% \n  gather_set_data(2:3) %>%  # TRANSFORMACION TIDY DE PARRALLEL SETS (ggforce)\nggplot(aes(x, id = id, split = y, value = value)) + #  INICIA GRAFICO\n  geom_parallel_sets(aes(fill = Lealtad), alpha = 0.5, axis.width = 0.1) +\n  geom_parallel_sets_axes(axis.width = 0.1) +\n  geom_parallel_sets_labels(colour = 'white') +\n  theme_fivethirtyeight() +\n  theme(axis.text.y = element_blank()) +\n  labs(title = \"Genero y Status de personajes de GoT\", \n       subtitle = \"#DatosDeMiércoles (por @TuQmano)\", \n       caption = \"Datos de @R4DS_es\")\n```\n\n::: {.cell-output-display}\n![](2019-04-18-diagramas_files/figure-html/CODE GOT-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "2019-04-18-diagramas_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}