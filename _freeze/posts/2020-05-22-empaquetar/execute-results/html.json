{
  "hash": "7bcbf8387842e3415e313a0341d55cdd",
  "result": {
    "markdown": "---\ntitle: polaR on CRAN\nauthor: Juan Pablo Ruiz Nicolini\ndate: '2020-05-22'\nslug: empaquetar\ncategories: [R, CRAN, r-pkg]\ntags: [polAr, geofacetAr]\n---\n\n\n\nPublicaron en CRAN una primera versión del paquete [polAr](https://electorarg.github.io/polAr/): _-POLítica ARgentina usando R_. En este post intentaré detallar un poco más el proceso de trabajo con el que llegamos hasta acá y, como yapa, el de [geofaceteAr](https://electorarg.github.io/geofaceteAR/).\n\n\n## polAr\n\n\n{{< tweet CRANberriesFeed 1261597845808975872 >}}\n\n\n\nLa idea del paquete es brindar herramientas que faciliten el flujo de trabajo del análisis político - electoral y el acceso a datos de Argentina usando `R`. Podriamos dividir las funciones de esta primera versión en tres familias: _(i) datos_, _(ii) indicadores_ y _(iii) visualización_: \n\n### datos\n\nEl paquete no incluye datos, sino que funciona como motor de búsqueda y descarga desde un repositorio alternativo. La idea detrás de ello es que funcione de modo indpendiente, que ésta pudiera ser aumentada o modificada sin efectos directos sobre el paquete. En una próxima publicación intetnaré avanzar sobre la documentación de este repositorio y un proceo de chequeo de información. \n\nLa principal fuente de información es el siempre útil [_Atlas Electoral de Andy Tow_](https://www.andytow.com/). Sitio que, además de ser la fuente de tabulados electorales más completa que existe en Argentina, disponibiliza las bases con los datos desagregados publicados por los escrutinios provisorios desde el año 2003 en adelante. \n\nEl primer paso de lo acá compartido fue el procesamiento de esas bases de datos y el armado de un  repositorio propio que me facilitara el trabajo de llamado de elecciones. En resumen: transformamos archivos `.mdb` (formato para tablas relacionles de _Microsoft Acces_) en `sqlite` para cada año electoral e hicimos consultas a esas basese de datos para obtener un archivo `.csv` para cada elección con una estrcutura así:  `distrito_categoria_turno_año.csv`. \n\nSolo para las elecciones del proceso electoral de 2019 trabajamos con datos compartidos por *pmoracho* en [_github_](https://github.com/pmoracho). Algo más de detalle del estado actual de todo esto esta disponible en el repositorio [`PolAr_Data`](https://github.com/electorArg/PolAr_Data). \n\nAl día de hoy el repositorio cuenta con 425 archvios de elecciones para las catgorías a Presidente, Diputades y Senadores Nacionales, para elecciones generales, primarias (P.A.S.O.) y balotaje presidencial. \n\nCon  `show_available_elections()` accedemos a un índice con la información disponible que podemos descargar: \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 426 × 5\n   district category round  year  NOMBRE   \n   <chr>    <chr>    <chr>  <chr> <chr>    \n 1 arg      presi    balota 2015  ARGENTINA\n 2 arg      presi    gral   2003  ARGENTINA\n 3 arg      presi    gral   2007  ARGENTINA\n 4 arg      presi    gral   2011  ARGENTINA\n 5 arg      presi    gral   2015  ARGENTINA\n 6 arg      presi    gral   2019  ARGENTINA\n 7 arg      presi    paso   2011  ARGENTINA\n 8 arg      presi    paso   2015  ARGENTINA\n 9 arg      presi    paso   2019  ARGENTINA\n10 caba     dip      gral   2005  CABA     \n# ℹ 416 more rows\n```\n:::\n:::\n\n\n\nTomando los parámetros de la tabla anterior con el siguiente comando  podemos completar los campos obligatorios para obtener los datos, en este caso de la elección general para presidente de 2019. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narg19 <- get_election_data(district = \"arg\",\n                  category = \"presi\",\n                  round = \"gral\", \n                  year = 2019)\n\narg19\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 192 × 8\n# Groups:   codprov [24]\n   category round  year codprov name_prov    electores listas    votos\n   <chr>    <chr> <dbl> <chr>   <chr>            <dbl> <chr>     <dbl>\n 1 presi    gral   2019 01      CABA           2562670 00010     13662\n 2 presi    gral   2019 01      CABA           2562670 00002     58652\n 3 presi    gral   2019 01      CABA           2562670 00009   1051116\n 4 presi    gral   2019 01      CABA           2562670 00005    714820\n 5 presi    gral   2019 01      CABA           2562670 00001    129933\n 6 presi    gral   2019 01      CABA           2562670 00004     37765\n 7 presi    gral   2019 01      CABA           2562670 blancos   30994\n 8 presi    gral   2019 01      CABA           2562670 nulos     14986\n 9 presi    gral   2019 02      BUENOS AIRES  12504537 00010    149613\n10 presi    gral   2019 02      BUENOS AIRES  12504537 00002    272846\n# ℹ 182 more rows\n```\n:::\n:::\n\n\n`arg19` es un _tibble_ de $192$ filas y 8 variables. Las filas son el producto de 8 filas únicas por provincia (los 24 grupos) con la cantidad de votos obtenidos por las distintas opciones electorales en este turno, categoría y año. \n\nEn este [artículo](https://electorarg.github.io/polAr/articles/data.html) se puede encontrar más detalles de la función. \n\n---\n\n### indicadores\n\nEl acceso a la información es quizás la función princiapl de `polAr`, la cual permitirá a usuaries trabajar con los datos como quieran. Pero el paquete incopora además funciones para realizar cálculos de interés para el análisis político. Esta primera versión solamente incluye dos varianes: `compute_nep()`, que devulelve el _Número Efectivo de Partidos_ (según dos fórmulas distintas) y `compute_cometitiveness()`, que calcula el nivel de competencia de una elección determinada.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narg19 %>% \n  compute_competitiveness() %>% \n  print(n= 24)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 5\n   codprov competitividad  year category round\n   <chr>            <dbl> <dbl> <chr>    <chr>\n 1 01               0.836  2019 presi    gral \n 2 02               0.839  2019 presi    gral \n 3 03               0.790  2019 presi    gral \n 4 04               0.689  2019 presi    gral \n 5 05               0.909  2019 presi    gral \n 6 06               0.801  2019 presi    gral \n 7 07               0.778  2019 presi    gral \n 8 08               0.999  2019 presi    gral \n 9 09               0.637  2019 presi    gral \n10 10               0.954  2019 presi    gral \n11 11               0.878  2019 presi    gral \n12 12               0.977  2019 presi    gral \n13 13               0.881  2019 presi    gral \n14 14               0.767  2019 presi    gral \n15 15               0.900  2019 presi    gral \n16 16               0.725  2019 presi    gral \n17 17               0.862  2019 presi    gral \n18 18               0.825  2019 presi    gral \n19 19               0.967  2019 presi    gral \n20 20               0.696  2019 presi    gral \n21 21               0.993  2019 presi    gral \n22 22               0.442  2019 presi    gral \n23 23               0.765  2019 presi    gral \n24 24               0.701  2019 presi    gral \n```\n:::\n:::\n\n\n\nEste [artículo](https://electorarg.github.io/polAr/articles/compute.html) del paquete tiene algo más de detalle. \n\n---\n\n### visualización\n\nPor último `polAr` incluye un par funciones que ayudan a visualizar rápidamente las elecciones de manera resumida. Una primera alternativa es generar tabulados con los resultados agregados de un comicio: \n\n\n```\narg19 %>% \n  get_names() %>% \n  tabulate_results()\n```\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"mpclfivhkf\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#mpclfivhkf table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#mpclfivhkf thead, #mpclfivhkf tbody, #mpclfivhkf tfoot, #mpclfivhkf tr, #mpclfivhkf td, #mpclfivhkf th {\n  border-style: none;\n}\n\n#mpclfivhkf p {\n  margin: 0;\n  padding: 0;\n}\n\n#mpclfivhkf .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#mpclfivhkf .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#mpclfivhkf .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#mpclfivhkf .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#mpclfivhkf .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#mpclfivhkf .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#mpclfivhkf .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#mpclfivhkf .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#mpclfivhkf .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#mpclfivhkf .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#mpclfivhkf .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#mpclfivhkf .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#mpclfivhkf .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#mpclfivhkf .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#mpclfivhkf .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mpclfivhkf .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#mpclfivhkf .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#mpclfivhkf .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#mpclfivhkf .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mpclfivhkf .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#mpclfivhkf .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mpclfivhkf .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#mpclfivhkf .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mpclfivhkf .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mpclfivhkf .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mpclfivhkf .gt_left {\n  text-align: left;\n}\n\n#mpclfivhkf .gt_center {\n  text-align: center;\n}\n\n#mpclfivhkf .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#mpclfivhkf .gt_font_normal {\n  font-weight: normal;\n}\n\n#mpclfivhkf .gt_font_bold {\n  font-weight: bold;\n}\n\n#mpclfivhkf .gt_font_italic {\n  font-style: italic;\n}\n\n#mpclfivhkf .gt_super {\n  font-size: 65%;\n}\n\n#mpclfivhkf .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#mpclfivhkf .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#mpclfivhkf .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#mpclfivhkf .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#mpclfivhkf .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#mpclfivhkf .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#mpclfivhkf .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal\" style>Argentina - 2019</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Elección General - Presidente de la Nación</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Lista\">Lista</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Votos\">Votos</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Lista\" class=\"gt_row gt_left\">blancos</td>\n<td headers=\"Votos\" class=\"gt_row gt_right\">64.4%</td></tr>\n    <tr><td headers=\"Lista\" class=\"gt_row gt_left\">nulos</td>\n<td headers=\"Votos\" class=\"gt_row gt_right\">35.6%</td></tr>\n  </tbody>\n  <tfoot class=\"gt_sourcenotes\">\n    <tr>\n      <td class=\"gt_sourcenote\" colspan=\"2\"><strong>Fuente:</strong> polArverse - <em><a href=\"https://politicaargentina.github.io/electorAr\">https://politicaargentina.github.io/electorAr</a></em></td>\n    </tr>\n  </tfoot>\n  \n</table>\n</div>\n```\n:::\n:::\n\n\nOtra alternativa es analizarlos de manera gráfica[^1]:\n\n[^1]: Inspirados en [`ggplotme`](https://github.com/jcrodriguez1989/ggplotme) de [Juan Cruz Rodrígurez](https://twitter.com/CancuCS) con [Camila Higa]() - [mentaComunicación](http://mentacomunicacion.com.ar/bigdata/)- trabajamos en un _bot_ de _Twitter_ que permite consultar resultados de elecciones. La idea es que un usuario le pregunta a `@pol_ar_bot` sobre una elección, cumpliendo con los parámetros necesarios (`distrito` + `turno` + `año` + `categoria`) y el _bot_ responde graficando el resultado. **bot**: https://twitter.com/pol_Ar_bot\n\n```\narg19 %>% \n  get_names() %>% \n  plot_results(national = T)\n```\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-22-empaquetar_files/figure-html/plot-1.png){width=672}\n:::\n:::\n\n\n\nAmbas funciones requieren utilizar primero `get_names` en la versión de CRAN. Esta es una función auxiliar para vincular la base de datos de resultados con los nombres de las listas que compiten. \n\nLa versión en desarrollo elimina ese paso intermedio para los casos por defecto de obtención de datos (con fomato `long`) pero sigue funcionando para los casos en que los datos de la elección fueron descargados `wide`. \n\n\nPuede notarse que `plot_results()` fue llamado con un parámatro `national = TRUE`. De esta manera, para elecciones a presidente, el gráfico resultante muestra el agregado de votos al nivel del distrito que se elige el cargo. Si, en cambio, no especificamos nada, el parámetro `FALSE` por defecto nos devolverá los resultados a nivel de provncias en grillas _cómo si fueran mapas_. De igual modo, si descargamos una elección a nivel departamental, `plot_results()`automáticamente graficará los resultados con `geofacetAR`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_election_data(district = \"caba\",\n                  category = \"dip\", \n                  round = \"paso\" , \n                  year = 2019 , \n                  level = \"departamento\") %>% \n  plot_results()\n```\n\n::: {.cell-output-display}\n![](2020-05-22-empaquetar_files/figure-html/geofaceteAR-1.png){width=672}\n:::\n:::\n\n\n\n\n**RESUMIENDO**\n\n\n\n{{< tweet TuQmano 1263618240938496000 >}}\n\n\n\n\n---\n\n## gofaceteAr\n\n\n<img src=\"https://github.com/electorArg/geofaceteAR/blob/master/hex/ggplot2.png?raw=true\" width=\"200\">\n\n\n\n\nLo anterior es posible gracias a otro paquete, disponible para descarga desde un repositorio de _github_.  `geofaceteAr` es una extensión local del paquete `geofacet` de Ryan Haffen. El empaquetado fue el resultado de ordenar la aplicación para Argentina de esta técnica de acomodar las grillas de `ggplot2` como si fueran mapas, originalmente presentadas en `LatinR` 2018. \n\nÉste carga el paquete `geofacet` y agrega funciones de utilidad para la _geografía_ argentina. La priemra de ellas es `show_arg_codes()`que muestra un diccionario de grillas con el _id_ correspondiente para descarga y equivalencias de los _id_ correspodientes a los  diferentes distritos. \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26 × 5\n   id           codprov codprov_censo codprov_iso name_iso                      \n   <chr>        <chr>   <chr>         <chr>       <chr>                         \n 1 ARGENTINA    \" \"     \" \"           AR          Argentina                     \n 2 CABA         \"01\"    \"02\"          AR-C        Ciudad Autónoma de Buenos Air…\n 3 BUENOS AIRES \"02\"    \"06\"          AR-B        Buenos Aires                  \n 4 CATAMARCA    \"03\"    \"10\"          AR-K        Catamarca                     \n 5 CORDOBA      \"04\"    \"14\"          AR-X        Córdoba                       \n 6 CORRIENTES   \"05\"    \"18\"          AR-W        Corrientes                    \n 7 CHACO        \"06\"    \"22\"          AR-H        Chaco                         \n 8 CHUBUT       \"07\"    \"26\"          AR-U        Chubut                        \n 9 ENTRE RIOS   \"08\"    \"30\"          AR-E        Entre Ríos                    \n10 FORMOSA      \"09\"    \"34\"          AR-P        Formosa                       \n# ℹ 16 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geofaceteAR)\n\nshow_arg_codes()\n```\n:::\n\n\n\nUsamos la función `get_grid()` para llamar una grilla disponible en la tabla anterior. Y `grid_preview()` si queremos ver el diseño de la grilla.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_grid(\"TUCUMAN\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   name_provincia            name row col code\n1         TUCUMAN       BURRUYACU   1   4  013\n2         TUCUMAN         CAPITAL   2   4  001\n3         TUCUMAN     CHICLIGASTA   4   2  005\n4         TUCUMAN       CRUZ ALTA   2   5  012\n5         TUCUMAN        FAMAILLA   3   3  003\n6         TUCUMAN        GRANEROS   5   4  009\n7         TUCUMAN JUAN B. ALBERDI   5   3  007\n8         TUCUMAN        LA COCHA   6   3  008\n9         TUCUMAN          LEALES   3   5  011\n10        TUCUMAN           LULES   3   4  002\n11        TUCUMAN        MONTEROS   3   2  004\n12        TUCUMAN       RIO CHICO   4   3  006\n13        TUCUMAN          SIMOCA   4   4  010\n14        TUCUMAN  TAFI DEL VALLE   2   1  017\n15        TUCUMAN      TAFI VIEJO   2   2  016\n16        TUCUMAN         TRANCAS   1   3  014\n17        TUCUMAN     YERBA BUENA   2   3  015\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-22-empaquetar_files/figure-html/preview-1.png){width=672}\n:::\n:::\n\n\nLuego, podemos hacer uso nuevamente de la información en nuestro diccionario de identificadores _geográficos_ para recodificar los distritos. El código por _default_ - el que figura dentro de cada cajita del _mapa_- es el correspondiente a los escrutinios provisorios (que utilizamos en `polAr`), pero podemos disponer de otros. Por ejemplo, los del _INDEC_: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_grid(\"TUCUMAN\") %>%\n  recode_grid(type = \"indec\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 4\n   name              row   col code \n   <chr>           <dbl> <dbl> <chr>\n 1 BURRUYACU           1     4 007  \n 2 CAPITAL             2     4 084  \n 3 CHICLIGASTA         4     2 021  \n 4 CRUZ ALTA           2     5 014  \n 5 FAMAILLA            3     3 028  \n 6 GRANEROS            5     4 035  \n 7 JUAN B. ALBERDI     5     3 042  \n 8 LA COCHA            6     3 049  \n 9 LEALES              3     5 056  \n10 LULES               3     4 063  \n11 MONTEROS            3     2 070  \n12 RIO CHICO           4     3 077  \n13 SIMOCA              4     4 091  \n14 TAFI DEL VALLE      2     1 098  \n15 TAFI VIEJO          2     2 105  \n16 TRANCAS             1     3 112  \n17 YERBA BUENA         2     3 119  \n```\n:::\n:::\n\n\n\n---\n\nHasta acá llegamos con la primera entrada respecto de {polAr} ya formalmente en CRAN. Espero en una próxima entrada contar un poco más del repositorio de datos y la incorporación de nuevas funciones en la versión de desarrollo. \n\n\n\n",
    "supporting": [
      "2020-05-22-empaquetar_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}